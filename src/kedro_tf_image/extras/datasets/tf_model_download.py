"""
 Copyright 2022 Bell Eapen

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""

from copy import deepcopy
from typing import Any, Dict
from kedro.io.core import AbstractDataSet
import tensorflow_hub as hub
import tensorflow as tf

# https://gist.github.com/dermatologist/062c46eafe8c118334a004f6cfab663d


class TfModelDownload(AbstractDataSet):
    """This class downloads a BERT model and returns tokenizers and
    """
    DEFAULT_LOAD_ARGS = {
        "trainable": False,
        "dim": [None, 224, 224, 3],
    }  # type: Dict[str, Any]
    def __init__(
        self,
        model_url: str,
        load_args: Dict[str, Any] = None,
    ) -> None:
        """Initialises the class.
        Args:
            filepath: The path to the file where the BERT model is saved.
            url: The URL from which the BERT model is downloaded.
            credentials: Credentials required to access the URL.
            version: If specified, should be an instance of
                ``kedro.io.core.Version``. If its ``load`` attribute is
                None, the latest version will be loaded. If its ``save``
                attribute is None, save version will be autogenerated.
        """
        self._model_url = model_url
        self._load_args = deepcopy(self.DEFAULT_LOAD_ARGS)
        if load_args is not None:
            self._load_args.update(load_args)

    def _load(self) -> Any:
        """Loads the BERT model from the URL and saves it to the specified
        location.
        """
        trainable = self._load_args.get("trainable", False)
        dim = self._load_args.get("dim", [None, 224, 224, 3])

        m = tf.keras.Sequential([
            hub.KerasLayer(self._model_url, trainable=trainable)
        ])
        m.build(dim)  # Batch input shape.

        return m

    def _save(self, data: Any) -> None:
        """Saves the BERT model to the specified location.
        Args:
            Not implemented
        """
        pass

    def _describe(self) -> Dict[str, Any]:
        """Returns a dict that describes the attributes of the dataset.
        Returns:
            A dict that describes the attributes of the dataset.
        """
        return dict(
            model_url=self._model_url,
        )
